153. Find Minimum in Rotated Sorted Array
Medium
10K
468
Companies
Suppose an array of length n sorted in ascending order is rotated between 1 and n times. For example, the array nums = [0,1,2,4,5,6,7] might become:

[4,5,6,7,0,1,2] if it was rotated 4 times.
[0,1,2,4,5,6,7] if it was rotated 7 times.
Notice that rotating an array [a[0], a[1], a[2], ..., a[n-1]] 1 time results in the array [a[n-1], a[0], a[1], a[2], ..., a[n-2]].

Given the sorted rotated array nums of unique elements, return the minimum element of this array.

You must write an algorithm that runs in O(log n) time.

 

Example 1:

Input: nums = [3,4,5,1,2]
Output: 1
Explanation: The original array was [1,2,3,4,5] rotated 3 times.
Example 2:

Input: nums = [4,5,6,7,0,1,2]
Output: 0
Explanation: The original array was [0,1,2,4,5,6,7] and it was rotated 4 times.
Example 3:

Input: nums = [11,13,15,17]
Output: 11
Explanation: The original array was [11,13,15,17] and it was rotated 4 times. 
 

Constraints:

n == nums.length
1 <= n <= 5000
-5000 <= nums[i] <= 5000
All the integers of nums are unique.
nums is sorted and rotated between 1 and n times.
Accepted
1.2M
Submissions
2.6M
Acceptance Rate
48.8%

class Solution {
public:
    int findMin(vector<int>& nums) {
        int n = nums.size();
        if(n==1)
            return nums[0];
        if(nums[0]<nums[n-1])
            return nums[0];

        int res = 1e9;

        int low = 0, high = n-1;
        while(low<=high) {
            int mid = (high+low)/2;
// cout<<mid<<" ";

            if(mid==0)
                return nums[0]<nums[1] ? nums[0] : nums[1];
            if(mid==n-1)
                return nums[mid]<nums[mid-1] ? nums[mid] : nums[mid-1];

            if(nums[mid]<nums[mid-1] && nums[mid]<nums[mid+1])
                return nums[mid];

            else if(nums[mid]>=nums[low])  {
                if(nums[mid]>nums[high])   
                    low = mid + 1;
                else 
                    high = mid - 1;            
            }
            
            else    {
                high = mid - 1;
            }

        }

        return res;        
    }
};