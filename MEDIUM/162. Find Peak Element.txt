162. Find Peak Element
Medium
8.8K
4.2K
Companies
A peak element is an element that is strictly greater than its neighbors.

Given a 0-indexed integer array nums, find a peak element, and return its index. If the array contains multiple peaks, return the index to any of the peaks.

You may imagine that nums[-1] = nums[n] = -âˆž. In other words, an element is always considered to be strictly greater than a neighbor that is outside the array.

You must write an algorithm that runs in O(log n) time.

 

Example 1:

Input: nums = [1,2,3,1]
Output: 2
Explanation: 3 is a peak element and your function should return the index number 2.
Example 2:

Input: nums = [1,2,1,3,5,6,4]
Output: 5
Explanation: Your function can return either index number 1 where the peak element is 2, or index number 5 where the peak element is 6.
 

Constraints:

1 <= nums.length <= 1000
-231 <= nums[i] <= 231 - 1
nums[i] != nums[i + 1] for all valid i.
Accepted
987K
Submissions
2.1M
Acceptance Rate
46.0%



class Solution {
public:
    int findPeakElement(vector<int>& nums) {
        int n = nums.size();
        if(n==1)
            return 0;

        int low = 0, high = n-1;
        while(low<=high) {
            int mid = (high+low)/2;
// cout<<mid<<" ";
            if(mid==0)
                return nums[0]>nums[1] ? 0 : 1;
            if(mid==n-1)
                return nums[mid]>nums[mid-1] ? mid : mid-1;

            if(nums[mid]>nums[mid-1] && nums[mid]>nums[mid+1])
                return mid;

            else if(nums[mid]<nums[mid+1])
                low = mid + 1;
            else 
                high = mid - 1;            

        }

    return -1;
    }
};