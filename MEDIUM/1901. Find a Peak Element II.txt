1901. Find a Peak Element II
Medium
1.3K
94
Companies
A peak element in a 2D grid is an element that is strictly greater than all of its adjacent neighbors to the left, right, top, and bottom.

Given a 0-indexed m x n matrix mat where no two adjacent cells are equal, find any peak element mat[i][j] and return the length 2 array [i,j].

You may assume that the entire matrix is surrounded by an outer perimeter with the value -1 in each cell.

You must write an algorithm that runs in O(m log(n)) or O(n log(m)) time.

 

Example 1:



Input: mat = [[1,4],[3,2]]
Output: [0,1]
Explanation: Both 3 and 4 are peak elements so [1,0] and [0,1] are both acceptable answers.
Example 2:



Input: mat = [[10,20,15],[21,30,14],[7,16,32]]
Output: [1,1]
Explanation: Both 30 and 32 are peak elements so [1,1] and [2,2] are both acceptable answers.
 

Constraints:

m == mat.length
n == mat[i].length
1 <= m, n <= 500
1 <= mat[i][j] <= 105
No two adjacent cells are equal.
Accepted
35.8K
Submissions
68.5K
Acceptance Rate
52.3%


class Solution {
public:
    vector<int> findPeakGrid(vector<vector<int>>& mat) {
        int n = mat.size();
        int m = mat[0].size();
        vector<int> res {-1, -1};

        for(int i=0; i<n; i++)  {
            mat[i].insert(mat[i].begin(),-1);
            mat[i].push_back(-1);
        }
        vector<int> vec (m+2, -1);
        mat.insert(mat.begin(), vec);
        mat.push_back(vec);

        // for(int i=0; i<mat.size(); i++) {
        //     for(int j=0; j<mat[0].size(); j++) {
        //         cout<<mat[i][j]<<" ";
        //     }
        //     cout<<"\n";
        // }

        for(int i=1; i<=n; i++)  {
            int l = 1;
            int h = m;

            while(l<=h) {
                int mid = (l + h) / 2;
                int val = mat[i][mid];

                if(val>mat[i][mid-1]&&val>mat[i-1][mid]&&val>mat[i][mid+1]&&val>mat[i+1][mid])  {
                    res[0] = i-1;
                    res[1] = mid-1;
                    return res;
                }
                else if(val>mat[i][mid-1]&&val>mat[i][mid+1])   {
                    for(int idx = 1; idx<=m; idx++) {
                        int v = mat[i][idx];
                        if(v>mat[i][idx-1]&&v>mat[i-1][idx]&&v>mat[i][idx+1]&&v>mat[i+1][idx])  {
                            res[0] = i-1;
                            res[1] = idx-1;
                            return res;
                        }
                    }
                    break;
                }

                else if(val<mat[i][mid+1])  {
                    l = mid+1;
                }
                else {
                    h = mid-1;
                }
            }
        }


        return res;    
    }
};