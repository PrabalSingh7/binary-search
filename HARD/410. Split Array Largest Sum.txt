410. Split Array Largest Sum
Hard
7.8K
173
Companies
Given an integer array nums and an integer k, split nums into k non-empty subarrays such that the largest sum of any subarray is minimized.

Return the minimized largest sum of the split.

A subarray is a contiguous part of the array.

 

Example 1:

Input: nums = [7,2,5,10,8], k = 2
Output: 18
Explanation: There are four ways to split nums into two subarrays.
The best way is to split it into [7,2,5] and [10,8], where the largest sum among the two subarrays is only 18.
Example 2:

Input: nums = [1,2,3,4,5], k = 2
Output: 9
Explanation: There are four ways to split nums into two subarrays.
The best way is to split it into [1,2,3] and [4,5], where the largest sum among the two subarrays is only 9.
 

Constraints:

1 <= nums.length <= 1000
0 <= nums[i] <= 106
1 <= k <= min(50, nums.length)
Accepted
257.8K
Submissions
481.9K
Acceptance Rate
53.5%





class Solution {
public:
    int count(vector<int> nums, int sumLim, int n) {
        int cnt = 0;
        int sum = 0;
        for(int i=0; i<n; i++)    {
            if(nums[i]>sumLim)
                return 1e9;
            sum += nums[i];
            
            if(i == n-1) {
                if(sum==0)  
                    break;
                cnt++;
                if(sum>sumLim)
                    cnt++;
                break;
            }
            if(sum > sumLim)    {
                cnt ++;
                sum = 0;
                i--;
            }
            else if(sum == sumLim)  {
                cnt ++;
                sum = 0;
            }
        }
        return cnt;
    }

    int splitArray(vector<int>& nums, int k) {
        int n = nums.size();
        int low = -1e8;
        long high = -1e8;
        long res = 1e12;
        long s = 0;

        for(auto i :nums)   {
            s += i;
            low = max(low,i);
        }
        high = s;

        while(low <= high)  {
            long mid = low + ((high-low)/2);
            long cnt = count(nums,mid,n);
            
            if(cnt>k)  {
                low = mid+1;
            }
            else if(cnt==k) {
                res = min(res,mid);
                high--;
            }
            else {
                res = min(res,mid);
                high = mid-1;
            }
        }

        return res == 1e12 ? -1 : res;
    }
};